#!/usr/bin/env bash
#
# cloudstate-antora build script

# antora docker image

readonly antora_version="2.3.3"
readonly antora_docker_image="cloudstateio/cloudstate-antora"

# cloudstate.io deploy

readonly deploy_repository="cloudstateio/docs"
readonly deploy_branch="current"
readonly deploy_token_var="DEPLOY_DOCS_TOKEN"
readonly deploy_name="Cloudstate Bot"
readonly deploy_email="deploy@cloudstate.io"

# locations

readonly docs_dir=$(pwd)
readonly root_dir=$(git rev-parse --show-toplevel)
readonly base_path="${docs_dir#$root_dir/}"
readonly base_dir="/antora/$base_path"
readonly build_dir="$docs_dir/build"
readonly site_dir="$build_dir/site"
readonly deploy_dir="$docs_dir/.deploy"

# echo logs

function red {
  echo -en "\033[0;31m$@\033[0m"
}

function green {
  echo -en "\033[0;32m$@\033[0m"
}

function yellow {
  echo -en "\033[0;33m$@\033[0m"
}

function blue {
  echo -en "\033[0;34m$@\033[0m"
}

function info {
  echo "$@"
}

function error {
  echo $(red "error:" "$@") 1>&2
}

function fail {
  error "$@"
  exit 1
}

# utility functions

function function_exists {
  declare -f "$1" > /dev/null
}

# cloudstate-antora commands

function cloudstate_antora__help {
  cat <<EOM
cloudstate-antora build script

Usage:
  cloudstate-antora <command> [<argument>...]

Commands:
  build     Build a documentation site
  clean     Remove the build directory
  deploy    Deploy documentation to cloudstate.io
  preview   Run HTTP server to preview site
  site      Create site configuration from source descriptors
  source    Create source descriptor for a component
  validate  Validate xrefs across the site
  version   Describe version based on nearest git tag

Use "cloudstate-antora help <command>" for more information about a command.
EOM
}

function cloudstate_antora__help__build {
  cat <<EOM
Build a documentation site

Usage:
  cloudstate-antora build [<option>...] <playbook>
  cloudstate-antora build [<option>...] --site-from <source-descriptor>...

Options:
  -a | --attribute <attribute|attribute=value>  Set an asciidoc attribute for site generation
       --author-mode                            Enable 'todo' and 'review' attributes
  --site-from <source-descriptor>...            Use configuration generated by 'site' command
EOM
}

function cloudstate_antora__build {
  local -a files
  local -a attributes
  local site_from=false
  local playbook
  while [[ $# -gt 0 ]] ; do
    case "$1" in
      --attribute | -a ) attributes+=("--attribute" "$2") ; shift 2 ;;
      --author-mode ) attributes+=("--attribute" "todo" "--attribute" "review") ; shift ;;
      --site-from ) site_from=true ; shift ;;
      * ) files+=("$1") ; shift ;;
    esac
  done
  if $site_from ; then
    [ ${#files[@]} -eq 0 ] && fail "missing required argument: source-descriptor"
    cloudstate_antora__site "${files[@]}"
    playbook="build/site.yml"
  else
    playbook="${files[0]}"
    [ -z "$playbook" ] && fail "missing required argument: playbook"
  fi
  info "Building Antora documentation site..."
  docker run \
    -u $(id -u):$(id -g) \
    -v "$root_dir:/antora" \
    --rm \
    --entrypoint /bin/sh \
    -t $antora_docker_image:$antora_version \
    -c "cd $base_dir && antora --cache-dir=.cache/antora --stacktrace ${attributes[@]} $playbook" \
    || fail "Failed to build documentation site"
  info $(green "Created documentation site") "$site_dir"
}

function cloudstate_antora__help__clean {
  cat <<EOM
Remove the build directory

Usage:
  cloudstate-antora clean
EOM
}

function cloudstate_antora__clean {
  rm -rf $build_dir
  info $(yellow "Build directory removed")
}

function cloudstate_antora__help__deploy {
  cat <<EOM
Deploy documentation to cloudstate.io

Usage:
  cloudstate-antora deploy [<option>...] <dir>...

Options:
  -m | --module <module>      Name of this Cloudstate module (required)
  -u | --upstream <upstream>  Github upstream as <owner>/<repo> (required)
  -b | --branch <branch>      Git branch to publish sources (required)
EOM
}

function __deploy_repo_url {
  local repo="$1"
  local repo_url="git@github.com:${repo}.git"
  [ -z "${!deploy_token_var}" ] || repo_url="https://${!deploy_token_var}@github.com/${repo}.git"
  echo "$repo_url"
}

function __deploy_repo_dir {
  local repo="$1"
  echo "$deploy_dir/repo/$repo"
}

function __deploy_checkout {
  local repo="$1"
  local branch="$2"
  local repo_url=$(__deploy_repo_url "$repo")
  local dir=$(__deploy_repo_dir "$repo")
  mkdir -p $(dirname "$dir")
  if [ -d "$dir" ]; then
    info "Updating local repository in $dir ..."
    if git -C "$dir" remote | grep upstream > /dev/null ; then
      git -C "$dir" remote set-url upstream $repo_url
    else
      git -C "$dir" remote add upstream $repo_url
    fi
    git -C "$dir" fetch upstream
  else
    info "Cloning $repo repository ..."
    git clone --origin upstream $repo_url "$dir"
  fi
  local local_branch_exists=$(git -C "$dir" rev-parse --verify $branch &> /dev/null; echo $?)
  local remote_branch_exists=$(git -C "$dir" ls-remote --exit-code --heads $repo_url $branch &> /dev/null; echo $?)
  if [ $local_branch_exists -ne 0 ] && [ $remote_branch_exists -ne 0 ] ; then
    info "Creating new $branch branch ..."
    git -C "$dir" checkout --orphan "$branch"
    git -C "$dir" reset --hard
    git -C "$dir" commit --allow-empty -m "Create $branch branch"
  else
    info "Checking out $branch branch ..."
    if [ $local_branch_exists -ne 0 ] ; then
      git -C "$dir" checkout -f -t upstream/$branch
    else
      git -C "$dir" checkout -f $branch
      [ $remote_branch_exists -eq 0 ] && git -C "$dir" reset --hard upstream/$branch
    fi
  fi
}

function __deploy_push {
  local repo="$1"
  local branch="$2"
  local message="$3"
  local dir=$(__deploy_repo_dir "$repo")
  local url=$(__deploy_repo_url "$repo")
  git -C "$dir" add --all
  if ! $(git -C "$dir" diff --exit-code --quiet HEAD); then
    git -C "$dir" config user.name "$deploy_name"
    git -C "$dir" config user.email "$deploy_email"
    git -C "$dir" commit -m "$message"
    git -C "$dir" push --quiet "$url" $branch
    git -C "$dir" show --stat-count=10 HEAD
    info $(green "Pushed changes for $repo $branch")
  else
    info $(yellow "No changes to push for $repo $branch")
  fi
}

function cloudstate_antora__deploy {
  local module
  local upstream
  local branch
  local -a dirs
  while [[ $# -gt 0 ]] ; do
    case "$1" in
      --module | -m ) module="$2" ; shift 2 ;;
      --upstream | -u ) upstream="$2" ; shift 2 ;;
      --branch | -b ) branch="$2" ; shift 2 ;;
      * ) dirs+=("$1") ; shift ;;
    esac
  done

  [ -z "$module" ] && fail "missing required argument: module"
  [ -z "$upstream" ] && fail "missing required argument: upstream"
  [ -z "$branch" ] && fail "missing required argument: branch"
  [ ${#dirs[@]} -eq 0 ] && fail "missing required argument: dirs"

  local commit=$(git log -1 '--format=format:%H')

  info $(blue "Deploying $module documentation to $upstream and $deploy_repository")

  __deploy_checkout "$upstream" "$branch"
  local upstream_repo_dir=$(__deploy_repo_dir "$upstream")

  info "Syncing docs to $upstream_repo_dir ..."
  local sources_dir="$deploy_dir/sources/$upstream"
  rm -rf "$sources_dir"
  for dir in "${dirs[@]}" ; do
    mkdir -p "$sources_dir/$base_path/$dir"
    rsync -a "$dir/" "$sources_dir/$base_path/$dir/"
  done
  rsync -av --delete --exclude='.git/' "$sources_dir/" "$upstream_repo_dir/"

  __deploy_push "$upstream" "$branch" "Update docs @ $commit"
  local docs_commit=$(git -C "$upstream_repo_dir" log -1 '--format=format:%H')

  __deploy_checkout "$deploy_repository" "$deploy_branch"
  local docs_repo_dir=$(__deploy_repo_dir "$deploy_repository")

  local docs_sources_dir="$docs_repo_dir/sources"
  local docs_sources="$docs_sources_dir/$module.yml"
  mkdir -p "$docs_sources_dir"

  cloudstate_antora__source -u "$upstream" -b "$branch" \
    --comment "Docs for: https://github.com/$upstream/commit/$commit" \
    --comment "Based on: https://github.com/$upstream/commit/$docs_commit" \
    "${dirs[@]}" > "$docs_sources"

  # Note: concurrent deploys for different modules can conflict on push
  __deploy_push "$deploy_repository" "$deploy_branch"  "Deploy $module documentation: $upstream@$commit"
}

function cloudstate_antora__help__preview {
  cat <<EOM
Run HTTP server to preview site

Usage:
  cloudstate-antora preview
EOM
}

function cloudstate_antora__preview {
  [ -d "$site_dir" ] || fail "build documentation site before previewing"
  info $(blue "Serving documentation site at http://localhost:8000")
  python3 -m http.server --directory $site_dir
}

function cloudstate_antora__help__site {
  cat <<EOM
Create site configuration from source descriptors

Usage:
  cloudstate-antora site <source-descriptor>...
EOM
}

function cloudstate_antora__site {
  local sources=("$@")
  [ ${#sources[@]} -eq 0 ] && fail "missing required argument: source-descriptor"

  local site_yml="${build_dir}/site.yml"
  mkdir -p "${build_dir}"
  cat > $site_yml <<EOF
site:
  title: "Cloudstate Documentation"
  url: https://cloudstate.io/docs/
asciidoc:
  attributes:
    idprefix: ''
    idseparator: '-'
    page-pagination: '@'
ui:
  bundle:
    url: https://github.com/cloudstateio/cloudstate-antora/raw/latest/download/ui-bundle.zip
    snapshot: true
runtime:
  fetch: true
output:
  clean: true
  dir: build/site
content:
  sources:
EOF
  local first=true
  for source in "${sources[@]}" ; do
    first=true
    while read line ; do
      if $first ; then
        echo "  - $line" >> $site_yml
        first=false
      else
        echo "    $line" >> $site_yml
      fi
    done < $source
  done
  info $(green "Created site configuration") $site_yml
}

function cloudstate_antora__help__source {
  cat <<EOM
Create source descriptor for a component

Usage:
  cloudstate-antora source [<option>...] <dir>...

Options:
  -u | --upstream <upstream>  Github upstream as <owner>/<repo> (required)
  -b | --branch <branch>      Git branch to publish sources (required if not preview)
  -p | --preview              Generate local preview source descriptor
  -c | --comment <comment>    Add header comment to source descriptor
EOM
}

function __source_mkstring {
  local prefix="$1"; shift
  local delimiter="$1"; shift
  local suffix="$1"; shift
  local first="$1"; shift
  echo -n "$prefix"
  echo -n "$first"
  for element in "$@" ; do
    echo -n "$delimiter$element"
  done
  echo "$suffix"
}

function cloudstate_antora__source {
  local upstream
  local branch
  local preview=false
  local -a comments
  local -a dirs
  while [[ $# -gt 0 ]] ; do
    case "$1" in
      --upstream | -u ) upstream="$2" ; shift 2 ;;
      --branch | -b ) branch="$2" ; shift 2 ;;
      --preview | -p ) preview=true ; shift ;;
      --comment | -c ) comments+=("$2") ; shift 2 ;;
      * ) dirs+=("$1") ; shift ;;
    esac
  done

  [ -z "$upstream" ] && fail "missing required argument: upstream"
  ! $preview && [ -z "$branch" ] && fail "missing required argument: branch"
  [ ${#dirs[@]} -eq 0 ] && fail "missing required argument: dirs"

  local url="https://github.com/$upstream"
  local branches="[$branch]"
  $preview && url="/antora" && branches="[HEAD]"
  local start_dirs=("${dirs[@]/#/$base_path/}")
  local start_paths=$(__source_mkstring '[' ', ' ']' "${start_dirs[@]}")
  local edit_url="https://github.com/$upstream/edit/master/{path}"

  for comment in "${comments[@]}" ; do
    echo "# $comment"
  done

  cat <<EOF
url: $url
branches: $branches
start_paths: $start_paths
edit_url: $edit_url
EOF
}

function cloudstate_antora__help__validate {
  cat <<EOM
Validate xrefs or links across the site

Usage:
  cloudstate-antora validate [<option>...] <playbook>
  cloudstate-antora validate [<option>...] --site-from <source-descriptor>...

Options:
  --links                             Whether to validate external links (with asciidoc-link-check)
  --links-config <config>             Path to asciidoc-link-check config (within documentation dir)
  --no-xrefs                          Disable the xref validation (for only external link validation)
  --site-from <source-descriptor>...  Use configuration generated by 'site' command
EOM
}

function cloudstate_antora__validate {
  local -a files
  local site_from=false
  local playbook
  local xrefs=true
  local links=false
  local links_config=""
  while [[ $# -gt 0 ]] ; do
    case "$1" in
      --links ) links=true ; shift ;;
      --links-config ) links_config="--config $2" ; shift 2 ;;
      --no-xrefs ) xrefs=false ; shift ;;
      --site-from ) site_from=true ; shift ;;
      * ) files+=("$1") ; shift ;;
    esac
  done
  if $xrefs ; then
    if $site_from ; then
      [ ${#files[@]} -eq 0 ] && fail "missing required argument: source-descriptor"
      cloudstate_antora__site "${files[@]}"
      playbook="build/site.yml"
    else
      playbook="${files[0]}"
      [ -z "$playbook" ] && fail "missing required argument: playbook"
    fi
    docker run \
      -v "$root_dir:/antora" \
      --rm \
      --entrypoint /bin/sh \
      -t $antora_docker_image:$antora_version \
      -c "cd $base_dir && NODE_PATH=\"\$(npm -g root)\" antora --generator @antora/xref-validator $playbook" \
      || fail "Failed to validate documentation xrefs"
    info $(green "Validated documentation xrefs")
  fi
  # Note: variable substitution in links is not currently supported: https://github.com/gaurav-nelson/asciidoc-link-check/issues/16
  if $links ; then
    docker run \
      -v "$root_dir:/antora" \
      --rm \
      --entrypoint /bin/sh \
      -t $antora_docker_image:$antora_version \
      -c "cd $base_dir && find . -name '*.adoc' -print0 | xargs -0 -n1 asciidoc-link-check --progress $links_config" \
      || fail "Failed to validate documentation links"
    info $(green "Validated documentation links")
  fi
}

function cloudstate_antora__help__version {
  cat <<EOM
Describe version based on nearest git tag

Usage:
  cloudstate-antora version [<option>...]

Options:
  --prefix <prefix>  Set the tag prefix (default: 'v')
EOM
}

function cloudstate_antora__version {
  local prefix="v"
  while [[ $# -gt 0 ]] ; do
    case "$1" in
      --prefix ) prefix="$2" ; shift 2 ;;
      * ) shift ;;
    esac
  done
  local tag=$(git describe --tags --abbrev=0 --match "$prefix[0-9]*" 2> /dev/null)
  [ -n "$tag" ] && echo "${tag#$prefix}" || echo "0.0.0"
}

# run cloudstate-antora command

declare -r command=$1
case $command in
  "" )
    cloudstate_antora__help
    ;;
  "help" )
    shift
    function_exists "cloudstate_antora__help__$1" && "cloudstate_antora__help__$1" || cloudstate_antora__help
    ;;
  * )
    shift
    function_exists "cloudstate_antora__${command}" || fail "command does not exist: ${command}"
    "cloudstate_antora__${command}" "$@"
    ;;
esac
